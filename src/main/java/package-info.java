/*
 * Singleton: применён в классе Controller - поскольку класс с глобальными настройками и единственным экземпляром,
 * вызываемым из мэйна
 * Factory:     не применен - можно было применить разве что в классе InputProcessor, но там создавалось по одному
 * экземляру каждого класса, и писать отдельную фабрику для создания одного экземпляра смысла нет - это только
 * усложнит код.
 * Builder:     применён к классу Person в связи с большим количеством внутренних полей (добавлен класс PersonBuilder
 * в общий пакет). Большого выигрыша в размере кода не получилось, но был убран огромный неудобный конструктор, так что
 * применение считаю оправданным, в контексте того, что шаблон нужен скорее для уменьшения вероятности ошибок, чем для
 * уменьшения количества кода.
 * Adapter:     не применен - нет подходящих классов/методов, несовместимых друг с другом, которые можно было бы
 * переписать с использованием адаптера
 * Bridge:      не применен - в связи с отсутствием сложных цепочек наследования, требующих переписывания с
 * использованием композиции(самая большая цепочка - в пакете hair, всего лишь три дочерних класса с общим родителем)
 * Facade:      применен (в методе processInput класса InputProcessor - кусок вынесен в отдельный метод processFacade).
 * Данный шаблон не сильно был нужен в этом месте, но это чуток улучшило читаемость этого класса. В принципе, даже
 * не сказать, что это прям-таки фасад, по сути просто разбиение метода на два других, но в остальных местах этот
 * шаблон был нужен еще меньше, поэтому я все же оставил так, посчитав, что так читается лучше. Если не считать это
 * изменение фасадом - то можно считать, что шаблон не применен, потому что более подходящих мест не было :)
 * DTO:         применён в классе FioGenerator - сокращен комплекс из трех составляющих ФИО до одного объекта
 * (как и советовалось в лекции)
 * Шаблон:      не применен по причине отсутствия одинаковых алгоритмов, которые можно было бы вынести в отдельный метод
 * (самое близкое - классы генераторов, но их логика и алгоритмы абсолютно разные, поэтому там достаточно
 * интерфейса. Даже если попытаться что-то там вынести - выигрыша в понятности и качестве кода в итоге не будет)
 */